/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface InnoHuntInterface extends Interface {
  getFunction(
    nameOrSignature: "createProject" | "invest" | "projects" | "token"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createProject",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export interface InnoHunt extends BaseContract {
  connect(runner?: ContractRunner | null): InnoHunt;
  waitForDeployment(): Promise<this>;

  interface: InnoHuntInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProject: TypedContractMethod<
    [
      name: string,
      fundingGoal: BigNumberish,
      _minProposalThreshold: BigNumberish,
      _minVoteThreshold: BigNumberish,
      _shareprice: BigNumberish,
      _totalshares: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  invest: TypedContractMethod<
    [projectId: BigNumberish, _numberOFShares: BigNumberish],
    [void],
    "payable"
  >;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        name: string;
        fundingGoal: bigint;
        currentFunding: bigint;
        totalShares: bigint;
        remainingShares: bigint;
        shareprice: bigint;
        isFundingClosed: boolean;
        minProposalThreshold: bigint;
        minVoteThreshold: bigint;
        proposalCount: bigint;
      }
    ],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [
      name: string,
      fundingGoal: BigNumberish,
      _minProposalThreshold: BigNumberish,
      _minVoteThreshold: BigNumberish,
      _shareprice: BigNumberish,
      _totalshares: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "invest"
  ): TypedContractMethod<
    [projectId: BigNumberish, _numberOFShares: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        name: string;
        fundingGoal: bigint;
        currentFunding: bigint;
        totalShares: bigint;
        remainingShares: bigint;
        shareprice: bigint;
        isFundingClosed: boolean;
        minProposalThreshold: bigint;
        minVoteThreshold: bigint;
        proposalCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
