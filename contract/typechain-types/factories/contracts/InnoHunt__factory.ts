/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { InnoHunt, InnoHuntInterface } from "../../contracts/InnoHunt";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "fundingGoal",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minProposalThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minVoteThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_shareprice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_totalshares",
        type: "uint256",
      },
    ],
    name: "createProject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "projectId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_numberOFShares",
        type: "uint256",
      },
    ],
    name: "invest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "projects",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "fundingGoal",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentFunding",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalShares",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "remainingShares",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shareprice",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isFundingClosed",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "minProposalThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minVoteThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "proposalCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "";

type InnoHuntConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InnoHuntConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InnoHunt__factory extends ContractFactory {
  constructor(...args: InnoHuntConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override deploy(
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_token, overrides || {}) as Promise<
      InnoHunt & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): InnoHunt__factory {
    return super.connect(runner) as InnoHunt__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InnoHuntInterface {
    return new Interface(_abi) as InnoHuntInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): InnoHunt {
    return new Contract(address, _abi, runner) as unknown as InnoHunt;
  }
}
