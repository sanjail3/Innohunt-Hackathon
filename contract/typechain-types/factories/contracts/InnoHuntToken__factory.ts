/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  InnoHuntToken,
  InnoHuntTokenInterface,
} from "../../contracts/InnoHuntToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fundingPlatform",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_fundingPlatform",
        type: "address",
      },
    ],
    name: "setFundingPlatform",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b1438038062001b14833981810160405281019062000037919062000420565b6040518060400160405280600d81526020017f496e6e6f48756e74546f6b656e000000000000000000000000000000000000008152506040518060400160405280600381526020017f49485400000000000000000000000000000000000000000000000000000000008152508160039081620000b49190620006c2565b508060049081620000c69190620006c2565b505050620000db33826200012360201b60201c565b33600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620008e0565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620001985760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016200018f9190620007ee565b60405180910390fd5b620001ac60008383620001b060201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160362000206578060026000828254620001f991906200083a565b92505081905550620002dc565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562000295578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016200028c9392919062000886565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000327578060026000828254039250508190555062000374565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620003d39190620008c3565b60405180910390a3505050565b600080fd5b6000819050919050565b620003fa81620003e5565b81146200040657600080fd5b50565b6000815190506200041a81620003ef565b92915050565b600060208284031215620004395762000438620003e0565b5b6000620004498482850162000409565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004d457607f821691505b602082108103620004ea57620004e96200048c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000515565b62000560868362000515565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005a36200059d6200059784620003e5565b62000578565b620003e5565b9050919050565b6000819050919050565b620005bf8362000582565b620005d7620005ce82620005aa565b84845462000522565b825550505050565b600090565b620005ee620005df565b620005fb818484620005b4565b505050565b5b81811015620006235762000617600082620005e4565b60018101905062000601565b5050565b601f82111562000672576200063c81620004f0565b620006478462000505565b8101602085101562000657578190505b6200066f620006668562000505565b83018262000600565b50505b505050565b600082821c905092915050565b6000620006976000198460080262000677565b1980831691505092915050565b6000620006b2838362000684565b9150826002028217905092915050565b620006cd8262000452565b67ffffffffffffffff811115620006e957620006e86200045d565b5b620006f58254620004bb565b6200070282828562000627565b600060209050601f8311600181146200073a576000841562000725578287015190505b620007318582620006a4565b865550620007a1565b601f1984166200074a86620004f0565b60005b8281101562000774578489015182556001820191506020850194506020810190506200074d565b8683101562000794578489015162000790601f89168262000684565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620007d682620007a9565b9050919050565b620007e881620007c9565b82525050565b6000602082019050620008056000830184620007dd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200084782620003e5565b91506200085483620003e5565b92508282019050808211156200086f576200086e6200080b565b5b92915050565b6200088081620003e5565b82525050565b60006060820190506200089d6000830186620007dd565b620008ac602083018562000875565b620008bb604083018462000875565b949350505050565b6000602082019050620008da600083018462000875565b92915050565b61122480620008f06000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806359fcfaee1161008c57806395d89b411161006657806395d89b411461024d578063a9059cbb1461026b578063dd62ed3e1461029b578063ec80a459146102cb576100ea565b806359fcfaee146101e157806370a08231146101ff5780638da5cb5b1461022f576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806340c10f19146101a957806342966c68146101c5576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f76102e7565b6040516101049190610e4b565b60405180910390f35b61012760048036038101906101229190610f06565b610379565b6040516101349190610f61565b60405180910390f35b61014561039c565b6040516101529190610f8b565b60405180910390f35b61017560048036038101906101709190610fa6565b6103a6565b6040516101829190610f61565b60405180910390f35b6101936103d5565b6040516101a09190611015565b60405180910390f35b6101c360048036038101906101be9190610f06565b6103de565b005b6101df60048036038101906101da9190611030565b61049e565b005b6101e96104ab565b6040516101f6919061106c565b60405180910390f35b61021960048036038101906102149190611087565b6104d1565b6040516102269190610f8b565b60405180910390f35b610237610519565b604051610244919061106c565b60405180910390f35b61025561053f565b6040516102629190610e4b565b60405180910390f35b61028560048036038101906102809190610f06565b6105d1565b6040516102929190610f61565b60405180910390f35b6102b560048036038101906102b091906110b4565b6105f4565b6040516102c29190610f8b565b60405180910390f35b6102e560048036038101906102e09190611087565b61067b565b005b6060600380546102f690611123565b80601f016020809104026020016040519081016040528092919081815260200182805461032290611123565b801561036f5780601f106103445761010080835404028352916020019161036f565b820191906000526020600020905b81548152906001019060200180831161035257829003601f168201915b5050505050905090565b600080610384610719565b9050610391818585610721565b600191505092915050565b6000600254905090565b6000806103b1610719565b90506103be858285610733565b6103c98585856107c7565b60019150509392505050565b60006012905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806104875750600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61049057600080fd5b61049a82826108bb565b5050565b6104a8338261093d565b50565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004805461054e90611123565b80601f016020809104026020016040519081016040528092919081815260200182805461057a90611123565b80156105c75780601f1061059c576101008083540402835291602001916105c7565b820191906000526020600020905b8154815290600101906020018083116105aa57829003601f168201915b5050505050905090565b6000806105dc610719565b90506105e98185856107c7565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d557600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b61072e83838360016109bf565b505050565b600061073f84846105f4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107c157818110156107b1578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016107a893929190611154565b60405180910390fd5b6107c0848484840360006109bf565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108395760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610830919061106c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108ab5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108a2919061106c565b60405180910390fd5b6108b6838383610b96565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361092d5760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610924919061106c565b60405180910390fd5b61093960008383610b96565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109af5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016109a6919061106c565b60405180910390fd5b6109bb82600083610b96565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a315760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610a28919061106c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610aa35760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a9a919061106c565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610b90578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610b879190610f8b565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610be8578060026000828254610bdc91906111ba565b92505081905550610cbb565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c74578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c6b93929190611154565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d045780600260008282540392505081905550610d51565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610dae9190610f8b565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610df5578082015181840152602081019050610dda565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e1d82610dbb565b610e278185610dc6565b9350610e37818560208601610dd7565b610e4081610e01565b840191505092915050565b60006020820190508181036000830152610e658184610e12565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e9d82610e72565b9050919050565b610ead81610e92565b8114610eb857600080fd5b50565b600081359050610eca81610ea4565b92915050565b6000819050919050565b610ee381610ed0565b8114610eee57600080fd5b50565b600081359050610f0081610eda565b92915050565b60008060408385031215610f1d57610f1c610e6d565b5b6000610f2b85828601610ebb565b9250506020610f3c85828601610ef1565b9150509250929050565b60008115159050919050565b610f5b81610f46565b82525050565b6000602082019050610f766000830184610f52565b92915050565b610f8581610ed0565b82525050565b6000602082019050610fa06000830184610f7c565b92915050565b600080600060608486031215610fbf57610fbe610e6d565b5b6000610fcd86828701610ebb565b9350506020610fde86828701610ebb565b9250506040610fef86828701610ef1565b9150509250925092565b600060ff82169050919050565b61100f81610ff9565b82525050565b600060208201905061102a6000830184611006565b92915050565b60006020828403121561104657611045610e6d565b5b600061105484828501610ef1565b91505092915050565b61106681610e92565b82525050565b6000602082019050611081600083018461105d565b92915050565b60006020828403121561109d5761109c610e6d565b5b60006110ab84828501610ebb565b91505092915050565b600080604083850312156110cb576110ca610e6d565b5b60006110d985828601610ebb565b92505060206110ea85828601610ebb565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061113b57607f821691505b60208210810361114e5761114d6110f4565b5b50919050565b6000606082019050611169600083018661105d565b6111766020830185610f7c565b6111836040830184610f7c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111c582610ed0565b91506111d083610ed0565b92508282019050808211156111e8576111e761118b565b5b9291505056fea2646970667358221220f76ce01939218a1cc20b2fb40affaa1d9eef9032873e1714db32a7c6d58ee37164736f6c63430008140033";

type InnoHuntTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InnoHuntTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InnoHuntToken__factory extends ContractFactory {
  constructor(...args: InnoHuntTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialSupply, overrides || {});
  }
  override deploy(
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialSupply, overrides || {}) as Promise<
      InnoHuntToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): InnoHuntToken__factory {
    return super.connect(runner) as InnoHuntToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InnoHuntTokenInterface {
    return new Interface(_abi) as InnoHuntTokenInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): InnoHuntToken {
    return new Contract(address, _abi, runner) as unknown as InnoHuntToken;
  }
}
